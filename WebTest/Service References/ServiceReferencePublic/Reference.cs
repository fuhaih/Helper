//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebTest.ServiceReferencePublic {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePublic.PublicService")]
    public interface PublicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricitySubTime_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricitySubTime_DictResponse")]
        byte[] Select_T_ElectricitySubTime_Dict(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricitySubTime_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricitySubTime_DictResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricitySubTime_DictAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricitySeason_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricitySeason_DictResponse")]
        byte[] Select_T_ElectricitySeason_Dict(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricitySeason_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricitySeason_DictResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricitySeason_DictAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPriceValue", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPriceValueResponse")]
        byte[] Select_T_ElectricityPriceValue(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPriceValue", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPriceValueResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPriceValueAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPriceUseInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPriceUseInfoResponse")]
        byte[] Select_T_ElectricityPriceUseInfo(bool Today, System.DateTime F_Time, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPriceUseInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPriceUseInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPriceUseInfoAsync(bool Today, System.DateTime F_Time, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPrice_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPrice_DictResponse")]
        byte[] Select_T_ElectricityPrice_Dict(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPrice_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPrice_DictResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPrice_DictAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPrice_Adjust", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPrice_AdjustResponse")]
        byte[] Select_T_ElectricityPrice_Adjust(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ElectricityPrice_Adjust", ReplyAction="http://tempuri.org/PublicService/Select_T_ElectricityPrice_AdjustResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPrice_AdjustAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_BuildPicture", ReplyAction="http://tempuri.org/PublicService/Get_BuildPictureResponse")]
        string[] Get_BuildPicture(string F_BuildID, int size, bool multi, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_BuildPicture", ReplyAction="http://tempuri.org/PublicService/Get_BuildPictureResponse")]
        System.Threading.Tasks.Task<string[]> Get_BuildPictureAsync(string F_BuildID, int size, bool multi, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_BuildPicture2", ReplyAction="http://tempuri.org/PublicService/Get_BuildPicture2Response")]
        string[][] Get_BuildPicture2(string[] BuildIDs, int size, bool multi, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_BuildPicture2", ReplyAction="http://tempuri.org/PublicService/Get_BuildPicture2Response")]
        System.Threading.Tasks.Task<string[][]> Get_BuildPicture2Async(string[] BuildIDs, int size, bool multi, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_BaseInfoResponse")]
        byte[] Select_T_ML_DiagnosticModel_BaseInfo(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_BaseInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_BaseInfoAsync(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_BaseInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TTBEMS.Framework.DataBase.FilterText))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TTBEMS.Framework.UserKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        byte[] Update_T_ML_DiagnosticModel_BaseInfo(object[] UpdateObjects, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_BaseInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Update_T_ML_DiagnosticModel_BaseInfoAsync(object[] UpdateObjects, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_BaseInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TTBEMS.Framework.DataBase.FilterText))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TTBEMS.Framework.UserKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        byte[] Insert_T_ML_DiagnosticModel_BaseInfo(object[] InsertObjects, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_BaseInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Insert_T_ML_DiagnosticModel_BaseInfoAsync(object[] InsertObjects, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_BaseInfoResponse")]
        byte[] Delete_T_ML_DiagnosticModel_BaseInfo(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_BaseInfo", ReplyAction="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_BaseInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Delete_T_ML_DiagnosticModel_BaseInfoAsync(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_DataResponse")]
        byte[] Select_T_ML_DiagnosticModel_Data(string F_DiagnosticModelID, bool IsSelectData, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_DataResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_DataAsync(string F_DiagnosticModelID, bool IsSelectData, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_DataResponse")]
        byte[] Update_T_ML_DiagnosticModel_Data(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Update_T_ML_DiagnosticModel_DataResponse")]
        System.Threading.Tasks.Task<byte[]> Update_T_ML_DiagnosticModel_DataAsync(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_DataResponse")]
        byte[] Insert_T_ML_DiagnosticModel_Data(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Insert_T_ML_DiagnosticModel_DataResponse")]
        System.Threading.Tasks.Task<byte[]> Insert_T_ML_DiagnosticModel_DataAsync(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_DataResponse")]
        byte[] Delete_T_ML_DiagnosticModel_Data(string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_Data", ReplyAction="http://tempuri.org/PublicService/Delete_T_ML_DiagnosticModel_DataResponse")]
        System.Threading.Tasks.Task<byte[]> Delete_T_ML_DiagnosticModel_DataAsync(string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_DictResponse")]
        byte[] Select_T_ML_DiagnosticModel_Dict(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_Dict", ReplyAction="http://tempuri.org/PublicService/Select_T_ML_DiagnosticModel_DictResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_DictAsync(TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_T_VD_Vacation", ReplyAction="http://tempuri.org/PublicService/Get_T_VD_VacationResponse")]
        byte[] Get_T_VD_Vacation(System.DateTime F_StartDate, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_T_VD_Vacation", ReplyAction="http://tempuri.org/PublicService/Get_T_VD_VacationResponse")]
        System.Threading.Tasks.Task<byte[]> Get_T_VD_VacationAsync(System.DateTime F_StartDate, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Weather", ReplyAction="http://tempuri.org/PublicService/Get_WeatherResponse")]
        byte[] Get_Weather(int id, string arg, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Weather", ReplyAction="http://tempuri.org/PublicService/Get_WeatherResponse")]
        System.Threading.Tasks.Task<byte[]> Get_WeatherAsync(int id, string arg, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Forecast_Day", ReplyAction="http://tempuri.org/PublicService/Get_Forecast_DayResponse")]
        byte[] Get_Forecast_Day(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Forecast_Day", ReplyAction="http://tempuri.org/PublicService/Get_Forecast_DayResponse")]
        System.Threading.Tasks.Task<byte[]> Get_Forecast_DayAsync(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Forecast_Hour", ReplyAction="http://tempuri.org/PublicService/Get_Forecast_HourResponse")]
        byte[] Get_Forecast_Hour(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_Forecast_Hour", ReplyAction="http://tempuri.org/PublicService/Get_Forecast_HourResponse")]
        System.Threading.Tasks.Task<byte[]> Get_Forecast_HourAsync(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_WeatherHistory", ReplyAction="http://tempuri.org/PublicService/Get_WeatherHistoryResponse")]
        byte[] Get_WeatherHistory(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_WeatherHistory", ReplyAction="http://tempuri.org/PublicService/Get_WeatherHistoryResponse")]
        System.Threading.Tasks.Task<byte[]> Get_WeatherHistoryAsync(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_WeatherHistory_Day", ReplyAction="http://tempuri.org/PublicService/Get_WeatherHistory_DayResponse")]
        byte[] Get_WeatherHistory_Day(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_WeatherHistory_Day", ReplyAction="http://tempuri.org/PublicService/Get_WeatherHistory_DayResponse")]
        System.Threading.Tasks.Task<byte[]> Get_WeatherHistory_DayAsync(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_OV_AQIPM25RecordValue", ReplyAction="http://tempuri.org/PublicService/Select_T_OV_AQIPM25RecordValueResponse")]
        byte[] Select_T_OV_AQIPM25RecordValue(string F_Station_Code, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_OV_AQIPM25RecordValue", ReplyAction="http://tempuri.org/PublicService/Select_T_OV_AQIPM25RecordValueResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_OV_AQIPM25RecordValueAsync(string F_Station_Code, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_T_OV_AQIPM25RecordValue_Newest", ReplyAction="http://tempuri.org/PublicService/Get_T_OV_AQIPM25RecordValue_NewestResponse")]
        byte[] Get_T_OV_AQIPM25RecordValue_Newest(int Top, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Get_T_OV_AQIPM25RecordValue_Newest", ReplyAction="http://tempuri.org/PublicService/Get_T_OV_AQIPM25RecordValue_NewestResponse")]
        System.Threading.Tasks.Task<byte[]> Get_T_OV_AQIPM25RecordValue_NewestAsync(int Top, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_WX_PlatformInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_WX_PlatformInfoResponse")]
        byte[] Select_T_WX_PlatformInfo(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_WX_PlatformInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_WX_PlatformInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_WX_PlatformInfoAsync(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_WX_UserBuildInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_WX_UserBuildInfoResponse")]
        byte[] Select_T_WX_UserBuildInfo(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublicService/Select_T_WX_UserBuildInfo", ReplyAction="http://tempuri.org/PublicService/Select_T_WX_UserBuildInfoResponse")]
        System.Threading.Tasks.Task<byte[]> Select_T_WX_UserBuildInfoAsync(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PublicServiceChannel : WebTest.ServiceReferencePublic.PublicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublicServiceClient : System.ServiceModel.ClientBase<WebTest.ServiceReferencePublic.PublicService>, WebTest.ServiceReferencePublic.PublicService {
        
        public PublicServiceClient() {
        }
        
        public PublicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PublicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] Select_T_ElectricitySubTime_Dict(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricitySubTime_Dict(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricitySubTime_DictAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricitySubTime_DictAsync(userkey);
        }
        
        public byte[] Select_T_ElectricitySeason_Dict(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricitySeason_Dict(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricitySeason_DictAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricitySeason_DictAsync(userkey);
        }
        
        public byte[] Select_T_ElectricityPriceValue(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPriceValue(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPriceValueAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPriceValueAsync(userkey);
        }
        
        public byte[] Select_T_ElectricityPriceUseInfo(bool Today, System.DateTime F_Time, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPriceUseInfo(Today, F_Time, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPriceUseInfoAsync(bool Today, System.DateTime F_Time, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPriceUseInfoAsync(Today, F_Time, userkey);
        }
        
        public byte[] Select_T_ElectricityPrice_Dict(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPrice_Dict(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPrice_DictAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPrice_DictAsync(userkey);
        }
        
        public byte[] Select_T_ElectricityPrice_Adjust(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPrice_Adjust(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ElectricityPrice_AdjustAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ElectricityPrice_AdjustAsync(userkey);
        }
        
        public string[] Get_BuildPicture(string F_BuildID, int size, bool multi, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_BuildPicture(F_BuildID, size, multi, userkey);
        }
        
        public System.Threading.Tasks.Task<string[]> Get_BuildPictureAsync(string F_BuildID, int size, bool multi, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_BuildPictureAsync(F_BuildID, size, multi, userkey);
        }
        
        public string[][] Get_BuildPicture2(string[] BuildIDs, int size, bool multi, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_BuildPicture2(BuildIDs, size, multi, userkey);
        }
        
        public System.Threading.Tasks.Task<string[][]> Get_BuildPicture2Async(string[] BuildIDs, int size, bool multi, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_BuildPicture2Async(BuildIDs, size, multi, userkey);
        }
        
        public byte[] Select_T_ML_DiagnosticModel_BaseInfo(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_BaseInfo(F_DistrictCode, F_BuildID, F_ModelDefID, F_ModelNodeID, F_DiagnosticModelID, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_BaseInfoAsync(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_BaseInfoAsync(F_DistrictCode, F_BuildID, F_ModelDefID, F_ModelNodeID, F_DiagnosticModelID, userkey);
        }
        
        public byte[] Update_T_ML_DiagnosticModel_BaseInfo(object[] UpdateObjects, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Update_T_ML_DiagnosticModel_BaseInfo(UpdateObjects, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Update_T_ML_DiagnosticModel_BaseInfoAsync(object[] UpdateObjects, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Update_T_ML_DiagnosticModel_BaseInfoAsync(UpdateObjects, userkey);
        }
        
        public byte[] Insert_T_ML_DiagnosticModel_BaseInfo(object[] InsertObjects, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Insert_T_ML_DiagnosticModel_BaseInfo(InsertObjects, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Insert_T_ML_DiagnosticModel_BaseInfoAsync(object[] InsertObjects, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Insert_T_ML_DiagnosticModel_BaseInfoAsync(InsertObjects, userkey);
        }
        
        public byte[] Delete_T_ML_DiagnosticModel_BaseInfo(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Delete_T_ML_DiagnosticModel_BaseInfo(F_DistrictCode, F_BuildID, F_ModelDefID, F_ModelNodeID, F_DiagnosticModelID, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Delete_T_ML_DiagnosticModel_BaseInfoAsync(string F_DistrictCode, string F_BuildID, string F_ModelDefID, string F_ModelNodeID, string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Delete_T_ML_DiagnosticModel_BaseInfoAsync(F_DistrictCode, F_BuildID, F_ModelDefID, F_ModelNodeID, F_DiagnosticModelID, userkey);
        }
        
        public byte[] Select_T_ML_DiagnosticModel_Data(string F_DiagnosticModelID, bool IsSelectData, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_Data(F_DiagnosticModelID, IsSelectData, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_DataAsync(string F_DiagnosticModelID, bool IsSelectData, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_DataAsync(F_DiagnosticModelID, IsSelectData, userkey);
        }
        
        public byte[] Update_T_ML_DiagnosticModel_Data(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Update_T_ML_DiagnosticModel_Data(ZipDatas, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Update_T_ML_DiagnosticModel_DataAsync(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Update_T_ML_DiagnosticModel_DataAsync(ZipDatas, userkey);
        }
        
        public byte[] Insert_T_ML_DiagnosticModel_Data(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Insert_T_ML_DiagnosticModel_Data(ZipDatas, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Insert_T_ML_DiagnosticModel_DataAsync(byte[] ZipDatas, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Insert_T_ML_DiagnosticModel_DataAsync(ZipDatas, userkey);
        }
        
        public byte[] Delete_T_ML_DiagnosticModel_Data(string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Delete_T_ML_DiagnosticModel_Data(F_DiagnosticModelID, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Delete_T_ML_DiagnosticModel_DataAsync(string F_DiagnosticModelID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Delete_T_ML_DiagnosticModel_DataAsync(F_DiagnosticModelID, userkey);
        }
        
        public byte[] Select_T_ML_DiagnosticModel_Dict(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_Dict(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_ML_DiagnosticModel_DictAsync(TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_ML_DiagnosticModel_DictAsync(userkey);
        }
        
        public byte[] Get_T_VD_Vacation(System.DateTime F_StartDate, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_T_VD_Vacation(F_StartDate, F_EndTime, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_T_VD_VacationAsync(System.DateTime F_StartDate, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_T_VD_VacationAsync(F_StartDate, F_EndTime, userkey);
        }
        
        public byte[] Get_Weather(int id, string arg, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_Weather(id, arg, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_WeatherAsync(int id, string arg, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_WeatherAsync(id, arg, userkey);
        }
        
        public byte[] Get_Forecast_Day(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_Forecast_Day(F_PublicMeterID, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_Forecast_DayAsync(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_Forecast_DayAsync(F_PublicMeterID, userkey);
        }
        
        public byte[] Get_Forecast_Hour(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_Forecast_Hour(F_PublicMeterID, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_Forecast_HourAsync(string F_PublicMeterID, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_Forecast_HourAsync(F_PublicMeterID, userkey);
        }
        
        public byte[] Get_WeatherHistory(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_WeatherHistory(F_PublicMeterID, F_StartTime, F_EndTime, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_WeatherHistoryAsync(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_WeatherHistoryAsync(F_PublicMeterID, F_StartTime, F_EndTime, userkey);
        }
        
        public byte[] Get_WeatherHistory_Day(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_WeatherHistory_Day(F_PublicMeterID, F_StartTime, F_EndTime, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_WeatherHistory_DayAsync(string F_PublicMeterID, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_WeatherHistory_DayAsync(F_PublicMeterID, F_StartTime, F_EndTime, userkey);
        }
        
        public byte[] Select_T_OV_AQIPM25RecordValue(string F_Station_Code, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_OV_AQIPM25RecordValue(F_Station_Code, F_StartTime, F_EndTime, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_OV_AQIPM25RecordValueAsync(string F_Station_Code, System.DateTime F_StartTime, System.DateTime F_EndTime, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_OV_AQIPM25RecordValueAsync(F_Station_Code, F_StartTime, F_EndTime, userkey);
        }
        
        public byte[] Get_T_OV_AQIPM25RecordValue_Newest(int Top, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_T_OV_AQIPM25RecordValue_Newest(Top, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Get_T_OV_AQIPM25RecordValue_NewestAsync(int Top, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Get_T_OV_AQIPM25RecordValue_NewestAsync(Top, userkey);
        }
        
        public byte[] Select_T_WX_PlatformInfo(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_WX_PlatformInfo(ft, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_WX_PlatformInfoAsync(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_WX_PlatformInfoAsync(ft, userkey);
        }
        
        public byte[] Select_T_WX_UserBuildInfo(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_WX_UserBuildInfo(ft, userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> Select_T_WX_UserBuildInfoAsync(TTBEMS.Framework.DataBase.FilterText ft, TTBEMS.Framework.UserKey userkey) {
            return base.Channel.Select_T_WX_UserBuildInfoAsync(ft, userkey);
        }
    }
}
